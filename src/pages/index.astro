---
import About from "../components/About/About.astro";
import Skills from "../components/Skills/Skills.astro";
import Footer from "../components/Footer.astro"; 
import data from "../../data/projects.json"
import Layout from "../layouts/Layout.astro";
import Hero from "../components/Hero/Hero";
import Projects from "../components/Projects/Projects.astro";
import DownloadModal from "../components/DownloadModal.astro";
---

<Layout title="Portfolio | Lasse Weber JÃ¸rgensen.">
  
  <div id="home"></div>
  <DownloadModal href={'/assets/Lasse_CV.pdf'}/>
    <nav class="bg-primary1 w-full h-20 z-40 sticky top-0 " style="contain:paint">
      <div class="bg-primary1 grid w-full px-12 h-full">
        <a
          class="ml-4 flex items-center text-offwhite text-2xl font-normal max-w-fit font-bodyfont col-start-1 max-h-ful"
          href="/"
        >
          LWJ
        </a>
  
        <div
          id="end_of_nav"
          class="hidden md:flex flex-row-reverse items-center col-start-2"
        >
          <div class="nav_links">
            <ul
              class="flex justify-between items-center [&>li]:pl-3 [&>*]:text-primary2"
            >
              <li>
                <a class=" nav_link transition ease-in-out duration-300" href="/">HOME</a>
              </li>
              <li class="projects_menu">
                <a href="#projects" class="nav_link transition ease-in-out duration-300">PROJECTS</a>
                <div class="absolute w-fit hidden">
                  <ul
                    class="bg-white w-full text-black [&>a]:p-2 rounded-md overflow-hidden [&>a]:cursor-pointer flex flex-col [&>a]:text-left [&>a]:min-w-full  "
                  >
                    {
                      data.map((project, index) => {
                        return data.length === index + 1 ? (
                          <a href=`/projects/${project.slug}` class="border hover:bg-gray-300 transition ease-in-out duration-300">
                            {project.name}
                          </a>
                        ) : (
                          <a href=`/projects/${project.slug}` class="border-t border-x hover:bg-gray-300 transition ease-in-out duration-300">
                            {project.name}
                          </a>
                        );
                      })
                    }
                  </ul>
                </div>
              </li>
              <li>
                <a class=" nav_link transition ease-in-out duration-300" href="#about">ABOUT</a>
              </li>
              <li>
                <a class=" nav_link transition ease-in-out duration-300" href="#skills">SKILL & TECH</a>
              </li>
              <li>
                <a class="nav_link transition ease-in-out duration-300 cursor-pointer cv">CV</a>
  
              </li>
            </ul>
          </div>
  
  
        </div>
  
        <div class="flex md:hidden col-start-2 items-center place-content-end cursor-pointer burgerMenu">
          <svg viewBox="0 0 100 80" width="40" height="40" class="text-white">
            <rect fill="white" class="one" width="100" height="3"></rect>
            <rect fill="white" class="two"y="30" width="100" height="3"></rect>
            <rect fill="white" class="three" y="60" width="100" height="3"></rect>
          </svg>
        </div>
      </div>
          <div class="h-screen w-fit px-8 bg-primary1 border-l border-white absolute top-0 right-0 transform translate-x-full ease-in-out duration-500 slideMenu">
            <span
        class="closeSlide absolute top-0 right-4 text-gray-100 text-4xl  hover:text-gray-400 cursor-pointer transition-all duration-300"
        >&times;</span>
        <div class="nav_links">
            <ul class="flex flex-col justify-between items-center [&>li]:pl-3 [&>*]:text-primary2 [&>li]:min-w-full [&>li]:p-4 mt-14 [&>li]:flex [&>li]:items-center [&>li]:justify-center">
              <li>
                <a href="/" class="nav_link transition ease-in-out duration-300">HOME</a>
              </li>
              <li  class="projects_menu relative">
                <a href="#projects" class="nav_link transition ease-in-out duration-300">PROJECTS</a>
                 <div class="absolute -left-28 w-fit hidden top-4 z-50">
                  <ul
                    class="bg-white w-full text-black [&>a]:p-2 rounded-md overflow-hidden [&>a]:cursor-pointer flex flex-col [&>a]:text-left [&>a]:min-w-full  "
                  >
                    {
                      data.map((project, index) => {
                        return data.length === index + 1 ? (
                          <a href=`/projects/${project.slug}` class="border hover:bg-gray-300 transition ease-in-out duration-300">
                            {project.name}
                          </a>
                        ) : (
                          <a href=`/projects/${project.slug}` class="border-t border-x hover:bg-gray-300 transition ease-in-out duration-300">
                            {project.name}
                          </a>
                        );
                      })
                    }
                  </ul>
                </div>
              </li>
              <li>
                <a href="#about" class="nav_link transition ease-in-out duration-300">ABOUT</a>
              </li>
              <li>
                <a href="#skills" class="nav_link transition ease-in-out duration-300">SKILL & TECH</a>
              </li>
              <li>
                <a class="nav_link transition ease-in-out duration-300 cursor-pointer cv">CV</a>
              </li>
            </ul>
          </div>
          </div>
  
      <div
        class="scrollIndicator h-0.5 self-end -ml-12 bg-white/20 col-span-2 hidden"
      >
        <div class="progress bg-accent1 h-full"></div>
      </div>
    </nav>
    <Hero client:load />
    <Projects data={data} />
    <About />
    <Skills />
    <Footer />
</Layout>

<script is:inline>
// ---------------  Scrollindicator ---------------
window.addEventListener("scroll", () => {
  const scrollIndicator = document.querySelector(".scrollIndicator");
  const progress = document.querySelector(".progress");
  const winScroll = document.documentElement.scrollTop;
  // const scrollIndicator = document.querySelector('.scrollIndicator')
  const winHeight =
    document.documentElement.scrollHeight -
    document.documentElement.clientHeight;
  const ScrollLeft = (winScroll / winHeight) * 100;
  ScrollLeft === 0
    ? scrollIndicator?.classList.add("hidden")
    : scrollIndicator?.classList.remove("hidden");
  if (progress !== null) {
    progress.style.width = `${ScrollLeft}%`;
  }
});

// ---------------  Automatic navmarking ---------------
let currentSection = '';
const boxes = document.querySelectorAll(".intersect");
function handleIntersection(entries, observer) {
  entries.forEach((entry) => {
    if (entry.isIntersecting) {
      const boxId = entry.target.id;
      const { ...matchingAnkers } = document.querySelectorAll(`#${boxId}`);
      currentSection = matchingAnkers[0];
      const [...allAs] = document.querySelectorAll("a");
      allAs.map((a) => {
        const ahref = a.href.substring(a.href.lastIndexOf("/") + 2);
        ahref === currentSection.id
          ? a.classList.add("text-accent1")
          : a.classList.remove("text-accent1");
      });
    }
  });
}

const observer = new IntersectionObserver(handleIntersection, {
  root: null, // Use the viewport as the root
  rootMargin: "0px",
  threshold: 0.5, // Trigger when at least 50% of the element is visible
});

boxes.forEach((box) => {
  observer.observe(box);
});
// ---------------  Dropdown menu ---------------

const projectMenus = Array.from(document.querySelectorAll(".projects_menu"))

projectMenus.map((menu) => {
  menu.addEventListener("mouseover", () => {
    menu.lastElementChild.classList.remove("hidden");
  })
})
projectMenus.map((menu) => {
  menu.addEventListener("mouseout", () => {
    menu.lastElementChild.classList.add("hidden");
  })
})

// ---------------  Burger menu ---------------
const burgerMenu = document.querySelector(".burgerMenu")
const slideMenu = document.querySelector(".slideMenu")
const menuClose = document.querySelector(".closeSlide")


burgerMenu.firstElementChild.addEventListener('click', () => {
  slideMenu.classList.add("translate-x-0")
  slideMenu.classList.remove("translate-x-full")
  slideMenu.parentElement.style.contain = null

})

menuClose.addEventListener('click', () => {
  slideMenu.classList.add("translate-x-full")
  slideMenu.classList.remove("translate-x-0")
  setTimeout(() => {
    slideMenu.parentElement.style.contain = 'paint';
  }, 400);
})

// --------------- Nav menu hover---------------
const navLinks = Array.from(document.querySelectorAll(".nav_link"))



for (const link of navLinks) {

  link.addEventListener('mouseover', () => {
    const selectedLink = link.href.substring(link.href.lastIndexOf("/") + 2)
    const activeLink = currentSection.id
    selectedLink === activeLink ? '' : link.classList.add('text-gray-500');

  });

  link.addEventListener('mouseout', () => {
    link.classList.remove('text-gray-500');
  });
}
const cvLink = Array.from(document.querySelectorAll(".cv"));
const downloadModal = document.querySelector(".download_modal");
const cancel = document.querySelector(".cancel");

cancel.previousElementSibling.addEventListener("click", () => {
  downloadModal.classList.add("hidden");
});
cancel.addEventListener("click", () => {
  downloadModal.classList.add("hidden");
});
cvLink.forEach((link) => {
  link.addEventListener("click", () => {
    downloadModal.classList.remove("hidden");
  });
});

</script>
