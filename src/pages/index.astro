---
import Layout from "../layouts/Layout.astro";
// import Nav from "../components/Nav/Nav.jsx"
// import Nav from "../components/Nav/NavAstro.astro"
import Hero from "../components/Hero/Hero";
import Projects from "../components/Projects/Projects.astro";
import About from "../components/About/About.astro";
import Skills from "../components/Skills/Skills.astro";
import Footer from "../components/Footer.astro";
---

<!-- #TODO:Add a load screen --><!-- #TODO: Add screentransition -->
<Layout title="Portfolio | Lasse Weber JÃ¸rgensen.">
  <div id="home"></div>
  <nav class="bg-primary1 w-full h-20 z-40 sticky top-0">
    <div class="bg-primary1 grid w-full px-12 h-full">
      <a
        class="ml-4 flex items-center text-offwhite text-2xl font-normal max-w-fit font-bodyfont col-start-1 max-h-ful"
        href="#home"
      >
        LWJ
      </a>
      <div
        id="end_of_nav"
        class="flex flex-row-reverse items-center col-start-2"
      >
        <div id="nav_links">
          <ul
            class="flex justify-between items-center [&>li]:pl-3 [&>*]:text-primary2"
          >
            <li>
              <a href="#home">HOME</a>
            </li>
            <li>
              <a href="#projects">PROJECTS</a>
            </li>
            <li>
              <a href="#about">ABOUT</a>
            </li>
            <li>
              <a href="contact">SKILL & TECH</a>
            </li>
            <li>
              <a href="#">CV</a>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <div
      class="scrollIndicator h-0.5 self-end -ml-12 bg-white/20 col-span-2 hidden"
    >
      <div class="progress bg-accent1 h-full"></div>
    </div>
  </nav>
  <Hero client:load />
  <Projects />
  <About />
  <Skills />
  <Footer />
</Layout>

<script is:inline>
// ---------------  Scrollindicator ---------------
window.addEventListener("scroll", () => {
  const scrollIndicator = document.querySelector(".scrollIndicator");
  const progress = document.querySelector(".progress");
  const winScroll = document.documentElement.scrollTop;
  // const scrollIndicator = document.querySelector('.scrollIndicator')
  const winHeight =
    document.documentElement.scrollHeight -
    document.documentElement.clientHeight;
  const ScrollLeft = (winScroll / winHeight) * 100;
  ScrollLeft === 0
    ? scrollIndicator?.classList.add("hidden")
    : scrollIndicator?.classList.remove("hidden");
  if (progress !== null) {
    progress.style.width = `${ScrollLeft}%`;
  }
});

// ---------------  Automatic bookmarking ---------------
const boxes = document.querySelectorAll(".intersect");
function handleIntersection(entries, observer) {
  entries.forEach((entry) => {
    if (entry.isIntersecting) {
      const boxId = entry.target.id;
      const { ...matchingAnkers } = document.querySelectorAll(`#${boxId}`);
      const currentAnker = matchingAnkers[0];
      const [...allAs] = document.querySelectorAll("a");
      allAs.map((a) => {
        const ahref = a.href.substring(a.href.lastIndexOf("/") + 2);
        ahref === currentAnker.id
          ? a.classList.add("text-accent1")
          : a.classList.remove("text-accent1");
      });
    }
  });
}

const observer = new IntersectionObserver(handleIntersection, {
  root: null, // Use the viewport as the root
  rootMargin: "0px",
  threshold: 0.5, // Trigger when at least 50% of the element is visible
});

boxes.forEach((box) => {
  observer.observe(box);
});
</script>
